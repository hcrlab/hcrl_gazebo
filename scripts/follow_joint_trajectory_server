#! /usr/bin/env python
# We'll let the usual joint_trajectory_controller provide the actual trajectory following and control, but we need to hack in Stretch's virtual joints.
# https://github.com/ros-controls/ros_controllers/blob/noetic-devel/joint_trajectory_controller/include/joint_trajectory_controller/joint_trajectory_controller_impl.h
import time

import math
import threading
from copy import deepcopy

import actionlib
import control_msgs.msg
import geometry_msgs.msg
import nav_msgs.msg
import numpy as np
import rospy
import sensor_msgs.msg
import tf.transformations as tft
import trajectory_msgs.msg
from control_msgs.msg import FollowJointTrajectoryResult, FollowJointTrajectoryGoal


def clamp(num, min_value, max_value):
    return max(min(num, max_value), min_value)


def shortest_angular_distance(x, y):
    return math.atan2(math.sin(x - y), math.cos(x - y))


def rotation_matrix(theta):
    """Construct a rotation matrix from a given angle.

    Args:
      theta: Angle (radians)

    Returns:
      The equivalent 2x2 rotation matrix as a np.array
    """
    c, s = np.cos(theta), np.sin(theta)
    return np.array([[c, -s], [s, c]])


def push_out_of_zero_region(value, bound):
    if value > 0:
        return max(bound, value)
    else:
        return min(-bound, value)


def pose_to_vec(pose):
    return np.array([pose.position.x, pose.position.y, yaw_from_quaternion(pose.orientation)])


def yaw_from_quaternion(q):
    m = tft.quaternion_matrix([q.x, q.y, q.z, q.w])
    return math.atan2(m[1, 0], m[0, 0])


class MobileBase(object):
    """Base controls the mobile base portion of the Fetch robot.

    Sample usage:
        base = fetch_api.Base()

        base.go_forward(0.1)
        base.turn(30 * math.pi / 180)

        while CONDITION:
            base.move(0.2, 0)
        base.stop()
    """

    def __init__(self):
        self._velocity_publisher = rospy.Publisher(
            '/stretch/cmd_vel', geometry_msgs.msg.Twist, queue_size=5)
        self._odom_sub = rospy.Subscriber(
            'odom',
            nav_msgs.msg.Odometry,
            callback=self._odom_callback,
            queue_size=1)
        self.odom = None
        self.finished_event = None
        self.current_task = None
        self.stopped = False

    def move(self, linear_speed, angular_speed):
        """Moves the base instantaneously at given linear and angular speeds.
        "Instantaneously" means that this method must be called continuously in
        a loop for the robot to move.
        Args:
            linear_speed: The forward/backward speed, in meters/second. A
                positive value means the robot should move forward.
            angular_speed: The rotation speed, in radians/second. A positive
                value means the robot should rotate clockwise.
        """
        twist = geometry_msgs.msg.Twist()
        twist.linear.x = linear_speed
        twist.angular.z = angular_speed
        self._velocity_publisher.publish(twist)

    def translate_async(self, distance, speed):
        if speed is None:
            speed = .4
        def translate_task():
            self.translate(distance, speed)

        self.current_task = threading.Thread(target=translate_task)
        return self.current_task

    def rotate_async(self, distance, velocity):
        if velocity is None:
            velocity = .6
        def rotate_task():
            self.rotate(distance, velocity)

        self.current_task = threading.Thread(target=rotate_task)
        return self.current_task

    def translate(self, distance, speed=0.2):
        """Moves the robot a certain distance.

        You cannot use this method to move less than 1 cm.

        Args:
            distance: The distance, in meters, to translate. A positive value
                means forward, negative means backward.
            max_speed: The maximum speed to travel, in meters/second.
        """
        speed = math.fabs(speed)
        target = distance
        while self.odom is None:
            rospy.sleep(0.1)
        start = pose_to_vec(self.odom)
        rate = rospy.Rate(25)
        heading = None
        while not rospy.is_shutdown() and not self.stopped:
            if heading is None:
                # Assume we have to go the full distance at this point
                error = distance
                # See if we've travelled far enough to tell which direction we're going
                diff = pose_to_vec(self.odom) - start
                if np.linalg.norm(diff, 2) > 0.01:
                    # Angle relating odom and base_link frames... but saving
                    # the hassle of juggling TF and transforms
                    heading = math.atan2(diff[1], diff[0])
                    if distance < 0:
                        # If we're moving backwards, the origin of the frame is
                        # the opposite direction to our movement vector
                        heading += math.pi
                    heading = rotation_matrix(heading)
            else:
                current_pose = pose_to_vec(self.odom)
                out = current_pose[:]
                # Make the start point the origin
                out[[0, 1]] -= start[[0, 1]]
                # ... and rotate the axes so that X points toward the front of the robot (base_link)
                out = np.matmul(out[[0, 1]], heading)
                # We want to be at target meters, but we're currently at out[0]
                error = target - out[0]
            if math.fabs(error) < 0.005:
                self.move(0, 0)
                rate.sleep()
                return
            command = clamp(error, -speed, speed)
            command = push_out_of_zero_region(command, 0.04)
            self.move(command, 0)
            rate.sleep()

    def rotate(self, angular_distance, speed=0.5):
        """Rotates the robot a certain angle.

        Args:
            angular_distance: The angle, in radians, to rotate. A positive
                value rotates counter-clockwise.
            speed: The maximum angular speed to rotate, in radians/second.
        """
        while self.odom is None:
            rospy.sleep(0.1)
        speed = math.fabs(speed)
        current_coord = yaw_from_quaternion(self.odom.orientation) % (
                2 * math.pi)
        end_coord = (current_coord + angular_distance) % (2 * math.pi)
        rate = rospy.Rate(25)

        while not rospy.is_shutdown() and not self.stopped:
            current_coord = yaw_from_quaternion(
                self.odom.orientation) % (2 * math.pi)
            error = shortest_angular_distance(current_coord, end_coord)
            if abs(error) < 0.01:
                return
            command = clamp(error, -1, 1)
            command = push_out_of_zero_region(command, 0.25)
            self.move(0, speed * -command)
            rate.sleep()

    def stop(self):
        """Stops the mobile base from moving.
        """
        self.move(0, 0)

    def _odom_callback(self, msg):
        self.odom = msg.pose.pose


def remove_joint_in_point(joint_name, point, joint_names):
    modified = deepcopy(point)
    to_remove = joint_names.index(joint_name)
    joint_names.remove(joint_name)

    prev_positions = point.positions
    prev_velocities = point.velocities
    prev_efforts = point.effort
    modified.positions = prev_positions[0:to_remove] + prev_positions[
                                                                 to_remove + 1:]
    modified.velocities = prev_velocities[0:to_remove] + prev_velocities[
                                                                   to_remove + 1:]
    modified.effort = prev_efforts[0:to_remove] + prev_efforts[
                                                                to_remove + 1:]
    return modified, joint_names


def add_joints_in_point(original_joint_names, joint_names, point, positions=None, velocities=None, efforts=None):
    modified = deepcopy(point)
    modified_joint_names = original_joint_names + joint_names
    if positions:
        modified.positions = tuple(
            list(modified.positions) + positions)
    if velocities:
        modified.velocities = tuple(
            list(modified.velocities) + velocities)
    if efforts:
        modified.efforts = tuple(
            list(modified.efforts) + efforts)
    return modified, modified_joint_names


class FollowJointTrajectoryServer(object):
    # create messages that are used to publish feedback/result
    _feedback = control_msgs.msg.FollowJointTrajectoryActionFeedback()
    _result = control_msgs.msg.FollowJointTrajectoryActionResult()

    def __init__(self, name):
        self._action_name = name
        self._joint_traj_command_pub = rospy.Publisher("/follow_joint_trajectory_raw/command",  trajectory_msgs.msg.JointTrajectory, queue_size=1)
        self._raw_client = actionlib.SimpleActionClient('/follow_joint_trajectory_raw/follow_joint_trajectory',
                                                        control_msgs.msg.FollowJointTrajectoryAction)
        connected = self._raw_client.wait_for_server(rospy.Duration(10.0))
        if not connected:
            rospy.logerr("Couldn't connect to raw follow_joint_trajectory interface")
            exit(1)
        self.base = MobileBase()
        self.joint_names = None
        self.joint_states = None

        self.prev_joint_states = None
        self._joint_states_sub = rospy.Subscriber(
            'joint_states',
            sensor_msgs.msg.JointState,
            callback=self._joints_callback,
            queue_size=1)
        self._as = actionlib.SimpleActionServer(self._action_name, control_msgs.msg.FollowJointTrajectoryAction,
                                                execute_cb=self.execute_cb, auto_start=False)
        self._as.start()

    def _joints_callback(self, joints_msg):
        if not self.joint_names:
            self.joint_names = joints_msg.name
        self.prev_joint_states = self.joint_states
        self.joint_states = np.array(joints_msg.position)

    def wait_for_joints_stop(self, joint_indices):
        def wait_task():
            # The lift joint takes a bit to ramp up
            time.sleep(0.1)
            while not rospy.is_shutdown() and not self._as.is_preempt_requested():
                diff = np.linalg.norm(self.joint_states[joint_indices] - self.prev_joint_states[joint_indices])
                # print(diff)
                if diff < 0.001:
                    break
                time.sleep(0.1)

        return threading.Thread(target=wait_task)

    def process_point(self, joint_names, point):
        velocity_goal = False
        if len(point.velocities) > 0:
            velocity_goal = True
        modified = deepcopy(point)
        modified_joint_names = deepcopy(joint_names)
        control_tasks = []
        if "gripper_aperture" in joint_names:
            gripper_joint_index = joint_names.index("gripper_aperture")
            original_pos = point.positions[gripper_joint_index]
            velocities = None
            if velocity_goal:
                original_vel = point.velocities[gripper_joint_index]
                velocities = [original_vel / 2., original_vel / 2.]
            modified, modified_joint_names = remove_joint_in_point("gripper_aperture", modified, modified_joint_names)
            # HACK: Opening wider than this causes the model to shake
            original_pos = min(original_pos, 0.3)
            as_finger_target = original_pos * 2.24
            modified, modified_joint_names = add_joints_in_point(modified_joint_names, ["joint_gripper_finger_right", "joint_gripper_finger_left"], modified,
                                                    positions=[as_finger_target, as_finger_target], velocities=velocities)

        if "joint_gripper_finger_left" in joint_names and "joint_gripper_finger_right" not in joint_names:
            joint_index = joint_names.index("joint_gripper_finger_left")
            velocities = None
            if velocity_goal:
                velocities = [point.velocities[joint_index]]
            modified, modified_joint_names = add_joints_in_point(modified_joint_names, ["joint_gripper_finger_right"], modified,
                                                positions=[point.positions[joint_index]], velocities=velocities)
        if "translate_mobile_base" in joint_names:
            base_joint_index = joint_names.index("translate_mobile_base")
            distance = point.positions[base_joint_index]

            velocity = None
            if velocity_goal:
                velocity = point.velocities[base_joint_index]
            base_task = self.base.translate_async(distance, velocity)
            modified, modified_joint_names = remove_joint_in_point("translate_mobile_base", modified, modified_joint_names)
            control_tasks.append(base_task)
        elif "rotate_mobile_base" in joint_names:
            base_joint_index = joint_names.index("rotate_mobile_base")
            distance = point.positions[base_joint_index]
            velocity = None
            if velocity_goal:
                velocity = point.velocities[base_joint_index]
            base_task = self.base.rotate_async(distance, velocity)
            modified, modified_joint_names = remove_joint_in_point("rotate_mobile_base", modified, modified_joint_names)
            control_tasks.append(base_task)
        if "wrist_extension" in joint_names:
            extension_joint_index = joint_names.index("wrist_extension")

            orig_pos = point.positions[extension_joint_index]
            velocities = None
            if velocity_goal:
                orig_vel = point.velocities[extension_joint_index]
                velocities = [orig_vel / 4.0 for _ in range(4)]
            modified, modified_joint_names = remove_joint_in_point("wrist_extension", modified, modified_joint_names)
            modified, modified_joint_names = add_joints_in_point(modified_joint_names, ["joint_arm_l0", "joint_arm_l1", "joint_arm_l2", "joint_arm_l3"],
                                                modified, positions=[orig_pos / 4.0 for i in range(4)], velocities=velocities)

        return modified, modified_joint_names, control_tasks

    def stop_joint_motion(self):
        # Empty trajectory on the topic interface puts joints into a temporary stop hold
        self._joint_traj_command_pub.publish(trajectory_msgs.msg.JointTrajectory())

    def execute_cb(self, goal):
        def relay_feedback(feedback_msg):
            # print(feedback_msg)
            self._as.publish_feedback(feedback_msg)
        self.base.stopped = False
        # Manually reset this bit
        # self._as.preempt_request = False
        rospy.loginfo(f"{goal.trajectory.joint_names} {goal.trajectory.points[0].positions} {goal.trajectory.points[0].velocities}")

        modified = goal.trajectory
        new_points = []
        modified_joint_names = []
        control_tasks = []
        for point in modified.points:
            modified_point, modified_joint_names, point_tasks = self.process_point(goal.trajectory.joint_names, point)
            new_points.append(modified_point)
            control_tasks.append(point_tasks)
        modified.points = new_points
        modified.joint_names = modified_joint_names
        print(modified)
        # Check if we still have stuff for the main controller to execute
        main_controller_needed = len(modified.joint_names) > 0
        if main_controller_needed:
            self._raw_client.send_goal(FollowJointTrajectoryGoal(trajectory=modified), feedback_cb=relay_feedback)
            # The simulator has these finish wayyy too quickly
            wait_stop_task = self.wait_for_joints_stop([self.joint_names.index(joint_name) for joint_name in modified.joint_names])
            wait_stop_task.start()

        if control_tasks:
            for point_tasks in control_tasks:
                if rospy.is_shutdown() or self._as.is_preempt_requested():
                    break
                for task in point_tasks:
                    task.start()
                while not rospy.is_shutdown():
                    rospy.sleep(0.1)
                    all_done = True
                    for task in point_tasks:
                        all_done = all_done and not task.is_alive()
                    if all_done:
                        break
                    if self._as.is_preempt_requested():
                        self.base.stopped = True
                        break
        if main_controller_needed:
            while not rospy.is_shutdown():
                rospy.sleep(0.1)
                if self._as.is_preempt_requested():
                    self.stop_joint_motion()
                result = self._raw_client.get_result()
                if result:
                    break
            result = self._raw_client.get_result()
            wait_stop_task.join()
        else:
            result = FollowJointTrajectoryResult()
            result.error_code = FollowJointTrajectoryResult.SUCCESSFUL

        if result.error_code == FollowJointTrajectoryResult.SUCCESSFUL:
            self._as.set_succeeded(result)
        else:
            self._as.set_aborted(result)
        print(result)


if __name__ == '__main__':
    rospy.init_node('follow_joint_trajectory_server')
    server = FollowJointTrajectoryServer("/stretch_controller/follow_joint_trajectory")
    rospy.spin()
