#! /usr/bin/env python
# We'll let the usual joint_trajectory_controller provide the actual trajectory following and control, but we need to hack in Stretch's virtual joints.
# https://github.com/ros-controls/ros_controllers/blob/noetic-devel/joint_trajectory_controller/include/joint_trajectory_controller/joint_trajectory_controller_impl.h
import threading

import rospy

import actionlib

import control_msgs.msg
from control_msgs.msg import FollowJointTrajectoryResult
from geometry_msgs.msg import Twist


import actionlib
import copy
import geometry_msgs.msg
import math
import nav_msgs.msg
import numpy as np
import rospy
import tf.transformations as tft


class MobileBase(object):
    """Base controls the mobile base portion of the Fetch robot.

    Sample usage:
        base = fetch_api.Base()

        base.go_forward(0.1)
        base.turn(30 * math.pi / 180)

        while CONDITION:
            base.move(0.2, 0)
        base.stop()
    """

    def __init__(self):
        self._velocity_publisher = rospy.Publisher(
            '/stretch/cmd_vel', geometry_msgs.msg.Twist, queue_size=5)
        self._odom_sub = rospy.Subscriber(
            'odom',
            nav_msgs.msg.Odometry,
            callback=self._odom_callback,
            queue_size=10)
        self.odom = None
        self.finished_event = None
        self.current_task = None

    def move(self, linear_speed, angular_speed):
        """Moves the base instantaneously at given linear and angular speeds.
        "Instantaneously" means that this method must be called continuously in
        a loop for the robot to move.
        Args:
            linear_speed: The forward/backward speed, in meters/second. A
                positive value means the robot should move forward.
            angular_speed: The rotation speed, in radians/second. A positive
                value means the robot should rotate clockwise.
        """
        twist = geometry_msgs.msg.Twist()
        twist.linear.x = linear_speed
        twist.angular.z = angular_speed
        self._velocity_publisher.publish(twist)

    def translate_async(self, distance):
        def translate_task():
            self.translate(distance)
        self.current_task = threading.Thread(target=translate_task)
        self.current_task.start()
        return self.current_task

    def rotate_async(self, distance):
        def rotate_task():
            self.rotate_controlled(distance)
        self.current_task = threading.Thread(target=rotate_task)
        self.current_task.start()
        return self.current_task

    def translate(self, distance, speed=0.1):
        """Moves the robot a certain distance.

        It's recommended that the robot move slowly. If the robot moves too
        quickly, it may overshoot the target. Note also that this method does
        not know if the robot's path is perturbed (e.g., by teleop). It stops
        once the distance traveled is equal to the given distance.

        You cannot use this method to move less than 1 cm.

        Args:
            distance: The distance, in meters, to rotate. A positive value
                means forward, negative means backward.
            max_speed: The maximum speed to travel, in meters/second.
        """
        while self.odom is None:
            rospy.sleep(0.1)
        start = copy.deepcopy(self.odom)
        rate = rospy.Rate(25)
        distance_from_start = self._linear_distance(start, self.odom)
        while distance_from_start < math.fabs(distance):
            distance_from_start = self._linear_distance(start, self.odom)
            if distance_from_start >= math.fabs(distance):
                return
            direction = -1 if distance < 0 else 1
            self.move(direction * speed, 0)
            rate.sleep()

    def rotate(self, angular_distance, speed=1):
        """Rotates the robot a certain angle.

        This illustrates how to turn the robot by checking that the X-axis of
        the robot matches that of the goal.

        Args:
            angular_distance: The angle, in radians, to rotate. A positive
                value rotates counter-clockwise.
            speed: The maximum angular speed to rotate, in radians/second.
        """
        while self.odom is None:
            rospy.sleep(0.1)
        direction = -1 if angular_distance < 0 else 1

        current_yaw = self._yaw_from_quaternion(self.odom.orientation)
        goal_yaw = current_yaw + angular_distance
        goal_x_axis = np.array([math.cos(goal_yaw), math.sin(goal_yaw), 0])

        rate = rospy.Rate(100)
        x_axis = self._x_axis_from_quaternion(self.odom.orientation)
        while not np.allclose(x_axis, goal_x_axis, atol=0.01):
            self.move(0, direction * speed)
            x_axis = self._x_axis_from_quaternion(self.odom.orientation)
            rate.sleep()

    def rotate_controlled(self, angular_distance, speed=0.5):
        """Rotates the robot a certain angle.

        This illustrates how to turn the robot using yaw angles and careful
        accounting.

        Args:
            angular_distance: The angle, in radians, to rotate. A positive
                value rotates counter-clockwise.
            speed: The maximum angular speed to rotate, in radians/second.
        """
        while self.odom is None:
            rospy.sleep(0.1)
        direction = -1 if angular_distance < 0 else 1

        current_coord = self._yaw_from_quaternion(self.odom.orientation) % (
            2 * math.pi)
        end_coord = (current_coord + angular_distance) % (2 * math.pi)
        rate = rospy.Rate(25)

        while not rospy.is_shutdown():
            current_coord = self._yaw_from_quaternion(
                self.odom.orientation) % (2 * math.pi)
            remaining = (direction *
                         (end_coord - current_coord)) % (2 * math.pi)
            if remaining < 0.01:
                return
            speed = max(0.25, min(1, remaining))
            self.move(0, direction * speed)
            rate.sleep()

    def stop(self):
        """Stops the mobile base from moving.
        """
        self.move(0, 0)

    def _odom_callback(self, msg):
        self.odom = msg.pose.pose

    @staticmethod
    def _linear_distance(pose1, pose2):
        pos1 = pose1.position
        pos2 = pose2.position
        dx = pos1.x - pos2.x
        dy = pos1.y - pos2.y
        dz = pos1.z - pos2.z
        return math.sqrt(dx * dx + dy * dy + dz * dz)

    @staticmethod
    def _x_axis_from_quaternion(q):
        m = tft.quaternion_matrix([q.x, q.y, q.z, q.w])
        return m[:3, 0]  # First column

    @staticmethod
    def _yaw_from_quaternion(q):
        m = tft.quaternion_matrix([q.x, q.y, q.z, q.w])
        return math.atan2(m[1, 0], m[0, 0])

    @staticmethod
    def _angular_distance(pose1, pose2):
        q1 = pose1.orientation
        q2 = pose2.orientation
        y1 = MobileBase._yaw_from_quaternion(q1)
        y2 = MobileBase._yaw_from_quaternion(q2)
        return math.fabs(y1 - y2) % (2 * math.pi)




class FollowJointTrajectoryServer(object):
    # create messages that are used to publish feedback/result
    _feedback = control_msgs.msg.FollowJointTrajectoryActionFeedback()
    _result = control_msgs.msg.FollowJointTrajectoryActionResult()

    def __init__(self, name):
        self._action_name = name
        self._client =  actionlib.SimpleActionClient('/stretch_controller_raw/follow_joint_trajectory', control_msgs.msg.FollowJointTrajectoryAction)
        connected = self._client.wait_for_server(rospy.Duration(10.0))
        if not connected:
            rospy.logerr("Couldn't connect to raw follow_joint_trajectory interface")
            exit(1)
        self.base = MobileBase()
        self._as = actionlib.SimpleActionServer(self._action_name, control_msgs.msg.FollowJointTrajectoryAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()

    def execute_cb(self, goal):
        def relay_feedback(feedback_msg):
            # print(feedback_msg)
            self._as.publish_feedback(feedback_msg)

        # TODO: intercept base incremental mode commands and run the control here. Does the real robot return immediately or wait for the base to finish?
        rospy.loginfo(goal.trajectory.joint_names)
        base_task = None
        if "joint_gripper_finger_left" in goal.trajectory.joint_names and not "joint_gripper_finger_right" in goal.trajectory.joint_names:
            joint_index = goal.trajectory.joint_names.index("joint_gripper_finger_left")
            goal.trajectory.joint_names.append("joint_gripper_finger_right")
            goal_point = goal.trajectory.points[0]
            goal.trajectory.points[0].positions = tuple(list(goal_point.positions) + [goal_point.positions[joint_index]])
        if "translate_mobile_base" in goal.trajectory.joint_names:
            base_joint_index = goal.trajectory.joint_names.index("translate_mobile_base")
            base_task = self.base.translate_async(goal.trajectory.points[0].positions[base_joint_index])
            goal.trajectory.joint_names.remove("translate_mobile_base")
            prev_positions = goal.trajectory.points[0].positions
            prev_velocities = goal.trajectory.points[0].velocities
            prev_efforts = goal.trajectory.points[0].effort
            goal.trajectory.points[0].positions = prev_positions[0:base_joint_index] + prev_positions[base_joint_index + 1:-1]
            goal.trajectory.points[0].velocities = prev_velocities[0:base_joint_index] + prev_velocities[base_joint_index + 1:-1]
            goal.trajectory.points[0].effort = prev_efforts[0:base_joint_index] + prev_efforts[base_joint_index + 1:-1]
        elif "rotate_mobile_base" in goal.trajectory.joint_names:
            base_joint_index = goal.trajectory.joint_names.index("rotate_mobile_base")
            base_task = self.base.rotate_async(goal.trajectory.points[0].positions[base_joint_index])
            goal.trajectory.joint_names.remove("rotate_mobile_base")
            prev_positions = goal.trajectory.points[0].positions
            prev_velocities = goal.trajectory.points[0].velocities
            prev_efforts = goal.trajectory.points[0].effort
            goal.trajectory.points[0].positions = prev_positions[0:base_joint_index] + prev_positions[base_joint_index + 1:-1]
            goal.trajectory.points[0].velocities = prev_velocities[0:base_joint_index] + prev_velocities[base_joint_index + 1:-1]
            goal.trajectory.points[0].effort = prev_efforts[0:base_joint_index] + prev_efforts[base_joint_index + 1:-1]
        if "wrist_extension" in goal.trajectory.joint_names:
            # Assume just wrist extension joint in traj for now
            goal_point = goal.trajectory.points[0]
            orig_goal_position = goal_point.positions[0]
            goal.trajectory.joint_names = ["joint_arm_l0","joint_arm_l1","joint_arm_l2","joint_arm_l3"]
            goal_point.positions = [orig_goal_position / 4.0 for i in range(4)]

        # Check if we still have stuff for the main controller to execute
        main_controller_needed = len(goal.trajectory.joint_names) > 0
        if main_controller_needed:
            self._client.send_goal(goal, feedback_cb=relay_feedback)
        if base_task:
            base_task.join()
        if main_controller_needed:
            done = self._client.wait_for_result()
            result = self._client.get_result()
        else:
            result = FollowJointTrajectoryResult()
            result.error_code = FollowJointTrajectoryResult.SUCCESSFUL
        if result.error_code == FollowJointTrajectoryResult.SUCCESSFUL:
            self._as.set_succeeded(result)
        else:
            self._as.set_aborted(result)
        print(result)


if __name__ == '__main__':
    rospy.init_node('follow_joint_trajectory_server')
    server = FollowJointTrajectoryServer("/stretch_controller/follow_joint_trajectory")
    rospy.spin()